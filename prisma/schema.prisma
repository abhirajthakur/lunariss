// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
  clients       Client[]
  invoices      Invoice[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expense {
  id          String   @id @default(cuid())
  date        DateTime
  amount      Float
  description String
  category    String
  receipt     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  client      Client?  @relation(fields: [clientId], references: [id])
  clientId    String?
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String
  company   String?
  address   String
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expenses  Expense[]
  invoices  Invoice[]
}

model Invoice {
  id        String        @id @default(cuid())
  number    String
  date      DateTime
  dueDate   DateTime
  status    String
  amount    Float
  tax       Float
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  client    Client        @relation(fields: [clientId], references: [id])
  clientId  String
  items     InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  rate        Float
  amount      Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
}

model Subscription {
  id                   String   @id @default(cuid())
  stripeCustomerId     String
  stripePriceId        String
  stripeSubscriptionId String
  status               String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String   @unique
}
